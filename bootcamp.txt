intersection

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        HashSet<Integer> set1=new HashSet<>();
        HashSet<Integer> resSet=new HashSet<>();
        for(int num:nums1){
            set1.add(num);
        }
        for(int num:nums2){
            if(set1.contains(num)){
                resSet.add(num);
            }
        }
        int[] res = new int[resSet.size()];
        Integer[] temp = resSet.toArray(new Integer[0]);

         for (int i = 0; i < temp.length; i++) {
            res[i] = temp[i];
        }
        return res;

    }
}
##
subarraySum

class Solution {
    public int subarraySum(int[] nums, int k) {
        int sum=0;int c=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        for(int num:nums){
            sum+=num;
            if(map.containsKey(sum-k)){
                c+=map.get(sum-k);
            }
        map.put(sum,map.getOrDefault(sum,0)+1);

        }
        return c;
        
    }
}
##
minPatches

 class Solution {
    public int minPatches(int[] nums, int n) {
        long miss=1;int i=0;
        int patch=0;
        while(miss<=n){
            if(i<nums.length&&nums[i]<=miss){
                 miss+=nums[i];
                 i++;
            }
            else{
                patch++;

                miss=2*miss;
                }


        }
        return patch;
    }
}
##
countSubarrays

class Solution {
    public long countSubarrays(int[] nums, long k) {
        long count = 0;
        long sum = 0;
        int left = 0;

        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];
            
            while (sum * (right - left + 1) >= k) {
                sum -= nums[left];
                left++;
            }

            count += (right - left + 1);
        }

        return count;
    }
}
##
numRescueBoats

import java.util.Arrays;

class Solution {
    public int numRescueBoats(int[] people, int limit) {
        Arrays.sort(people);  
        int l = 0;
        int r = people.length - 1;
        int boats = 0;

        while (l <=r) {
            if (people[l] + people[r] <= limit) {
                l++;
            }
            r--;
            boats++;
        }

        return boats;
    }
}
##
twoSum

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int first=0;

        int sec=0;
        for(int k=0;k<nums.length;k++){
            for(int j=k+1;j<nums.length;j++){
            if(nums[k]+nums[j]==target){
                first=k;
                sec=j;
            }

        }
        }
        return new int[]{first,sec};
    
    
}
}
##
maxSlidingWindow
import java.util.*;

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) return new int[0];

        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> deque = new LinkedList<>();

        for (int i = 0; i < n; i++) {
            while (!deque.isEmpty() && deque.peekFirst() < i - k + 1)
                deque.pollFirst();

            while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i])
                deque.pollLast();

            deque.offerLast(i); 

            if (i >= k - 1)
                result[i - k + 1] = nums[deque.peekFirst()];
        }

        return result;
    }
}
##
threeSumClosest
import java.util.*;

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closest = nums[0] + nums[1] + nums[2];
        
        for (int i = 0; i < nums.length - 2; i++) {
            int left = i + 1, right = nums.length - 1;
            
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                
                if (Math.abs(sum - target) < Math.abs(closest - target)) {
                    closest = sum;
                }
                
                if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        
        return closest;
    }
}
##
missingNumber
class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int expectedSum = n * (n + 1) / 2;
        int actualSum = 0;
        
        for (int num : nums) {
            actualSum += num;
        }
        
        return expectedSum - actualSum;
    }
}
##
maxEnvelopes

import java.util.*;

public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String inputLine = scanner.nextLine().trim();

        // Clean up input string and parse it
        inputLine = inputLine.replaceAll("\\[\\[", "").replaceAll("]]", "");
        String[] pairStrings = inputLine.split("\\],\\[");

        int[][] envelopes = new int[pairStrings.length][2];
        for (int i = 0; i < pairStrings.length; i++) {
            String[] nums = pairStrings[i].split(",");
            envelopes[i][0] = Integer.parseInt(nums[0].trim());
            envelopes[i][1] = Integer.parseInt(nums[1].trim());
        }

        Solution solution = new Solution();
        int result = solution.maxEnvelopes(envelopes);
        System.out.println(result);
    }
}
class Solution {

    public int maxEnvelopes(int[][] nums) {
       Arrays.sort(nums,(a,b)->{
           if (a[0]==b[0]){
               return b[1]-a[1];
           }
           return a[0]-b[0];
       });
       int n=nums.length;
       int height[] =new int[n+1];
       height[1]=nums[0][1];
       int cnt=1;
       for(int i=1;i<n;i++){
           if(height[cnt]<nums[i][1]){
               cnt++;
               height[cnt]=nums[i][1];
           }
           else{
               int l=0,h=cnt;
               while(l<h){
                   int m=(l+h)/2;
                   if(height[m]<nums[i][1]) l=m+1;
                   h=m;
               }
               int p=1;
               if(height[p]<nums[i][1]){
                   p=l;
                   height[p]=nums[i][1];
               }
           }
       }
       return cnt;
    }
}

##
findMinArrowShots

import java.util.*;

class Solution {
    public int findMinArrowShots(int[][] points) {
        if (points.length == 0) return 0;
        
        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));
        
        int arrows = 1;
        int end = points[0][1];
        
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > end) {
                arrows++;
                end = points[i][1];
            }
        }
        
        return arrows;
    }
}
##
firstUniqChar

class Solution {
    public int firstUniqChar(String s) {
        int[] count = new int[26];
        
        for (char c : s.toCharArray()) {
            count[c - 'a']++;
        }
        
        for (int i = 0; i < s.length(); i++) {
            if (count[s.charAt(i) - 'a'] == 1) {
                return i;
            }
        }
        
        return -1;
    }
}
##
easy5
class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        int count=0;
        for(char a:stones.toCharArray()){
            if(jewels.indexOf(a)!=-1){
                count++;
            }
        }
        return count;

        
    }
}
##
mid5
class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        String longest = "";

        for (String word : dictionary) {
            if (word.length() < longest.length() ||
                (word.length() == longest.length() && word.compareTo(longest) > 0)) {
                continue;
            }

            int pos = -1;
            boolean isSubsequence = true;

            for (int i = 0; i < word.length(); i++) {
                pos = s.indexOf(word.charAt(i), pos + 1);
                if (pos == -1) {
                    isSubsequence = false;
                    break;
                }
            }

            if (isSubsequence) {
                longest = word;
            }
        }

        return longest;
    }
}
##
hard5
class Solution {
    public String shortestPalindrome(String s) {
        String rev = new StringBuilder(s).reverse().toString();
        for (int i = 0; i < s.length(); i++) {
            if (s.startsWith(rev.substring(i))) {
                return rev.substring(0, i) + s;
            }
        }
        return "";
    }
}

##
easy6
import java.util.*;

public class Solution {

    public boolean checkIfExist(int[] arr) {
       for(int i=0;i<arr.length;i++)
       {
           for(int j=0;j<arr.length;j++){
               if(arr[i]==arr[j]*2)return true;
           }
       }
       return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Solution sol = new Solution();

        // Read the entire line as input
        int n = scanner.nextInt();
        int[] arr = new int[n];

        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        boolean result = sol.checkIfExist(arr);
        System.out.println(result);
    }
}
##
mid6
import java.util.*;

public class Solution
{
    public String decodeString(String s)
    {
        String res="";
        int i=0;
        Stack<Character> st=new Stack<>();
        Stack<Integer> inst=new Stack<>();
        int num=0;
        while (i<s.length()){
            
            if(s.charAt(i)=='['){
                inst.push(num);
                st.push(s.charAt(i));
                num=0;
            }
            else if(s.charAt(i)-'0'>=0 && s.charAt(i)-'0'<=9){
                num=num*10+s.charAt(i)-'0';
            }
            else if(s.charAt(i)==']'){
                String c="";
                int current;
                String cur="";
                while (st.isEmpty()==false && st.peek()!='['){
                    cur=String.valueOf(st.pop())+cur;
                }
                if (!st.isEmpty()) st.pop(); 
                current = inst.isEmpty() ? 1 : inst.pop(); 
                for(int j=0;j<current;j++){
                    c+=cur;
                }
                for (int j = 0; j < c.length(); j++) {
                    st.push(c.charAt(j));
                }
                
            }
            else {
                st.push(s.charAt(i));
            }
            i++;
        }
        while (!st.isEmpty()) {
            res = st.pop() + res;
        }
        return res;      
      
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();

        Solution solution = new Solution();
        String result = solution.decodeString(input);
        System.out.println( result);

        scanner.close();
    }
}
##
hard6
class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> result = new ArrayList<>();
        int index = 0;

        while (index < words.length) {
            int totalChars = words[index].length();
            int last = index + 1;

            // Determine how many words fit into the current line
            while (last < words.length) {
                if (totalChars + 1 + words[last].length() > maxWidth) break;
                totalChars += 1 + words[last].length();
                last++;
            }

            StringBuilder sb = new StringBuilder();
            int numberOfWords = last - index;
            int numberOfGaps = numberOfWords - 1;

            // If it's the last line or only one word fits, left-justify
            if (last == words.length || numberOfWords == 1) {
                for (int i = index; i < last; i++) {
                    sb.append(words[i]);
                    if (i < last - 1) sb.append(" ");
                }
                while (sb.length() < maxWidth) {
                    sb.append(" ");
                }
            } else {
                int totalSpaces = maxWidth - (totalChars - numberOfGaps);
                int spacePerGap = totalSpaces / numberOfGaps;
                int extraSpaces = totalSpaces % numberOfGaps;

                for (int i = index; i < last; i++) {
                    sb.append(words[i]);
                    if (i < last - 1) {
                        int spacesToAdd = spacePerGap + (extraSpaces-- > 0 ? 1 : 0);
                        for (int s = 0; s < spacesToAdd; s++) {
                            sb.append(" ");
                        }
                    }
                }
            }

            result.add(sb.toString());
            index = last;
        }

        return result;
    }
}
##
easy7
class Solution {
    public boolean isPowerOfTwo(int n) {
        return (n > 0 && (n & (n - 1)) == 0);
    }
}
33
mid7
class Solution {
    public int reverse(int x) {
         long rev=0;
        while(x!=0){

            int rem=x%10;
            rev=rev*10+rem;
            x/=10;

        }
        if(rev<Integer.MIN_VALUE||rev>Integer.MAX_VALUE){
            return 0;
        }
        return (int) rev;
    }
}
##
hard7
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Solution {

    // Static Node structure
    static class ListNode {
        int val;
        ListNode next;

        ListNode(int x) {
            val = x;
            next = null;
        }
    }

    // Merge k sorted linked lists
    public ListNode mergeKLists(ListNode[] lists) {
         if(lists==null || lists.length==0) return null;
         return mergek(lists,0,lists.length-1);
         
        }
    private ListNode mergek(ListNode[] lists,int st,int end){
        if(st==end) return lists[st];
        if(st+1==end) return  merge(lists[st],lists[end]);
        int m=st+(end-st)/2;
        ListNode l=mergek(lists,st,m);
        ListNode r=mergek(lists,m+1,end);
        return merge(l,r);
    }
    private ListNode merge(ListNode l1,ListNode l2){
        ListNode dummy=new ListNode(0);
        ListNode curr=dummy;
        while(l1!=null &&l2!=null){
        if(l1.val<l2.val){
            curr.next=l1;
            l1=l1.next;
        }
        else{
                curr.next=l2;
            l2=l2.next;
        }
        curr=curr.next;}
        curr.next=(l1!=null)?l1:l2;
        return dummy.next;
    }

        
    

    // Create linked list from array
    public ListNode createList(int[] values) {
        if (values.length == 0) return null;
        ListNode head = new ListNode(values[0]);
        ListNode current = head;

        for (int i = 1; i < values.length; i++) {
            current.next = new ListNode(values[i]);
            current = current.next;
        }

        return head;
    }

    // Convert a single list to LeetCode-style string
    public String listToString(ListNode head) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        while (head != null) {
            sb.append(head.val);
            if (head.next != null) sb.append(",");
            head = head.next;
        }
        sb.append("]");
        return sb.toString();
    }

    // Convert array of linked lists to LeetCode-style input string
    public String listsToInputString(ListNode[] lists) {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i < lists.length; i++) {
            sb.append(listToString(lists[i]));
            if (i < lists.length - 1) sb.append(",");
        }
        sb.append("]");
        return sb.toString();
    }

    // Main method
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Solution solution = new Solution();

        int k = scanner.nextInt(); // Number of linked lists
        ListNode[] lists = new ListNode[k];

        for (int i = 0; i < k; i++) {
            int n = scanner.nextInt(); // Number of elements in list i
            int[] values = new int[n];
            for (int j = 0; j < n; j++) {
                values[j] = scanner.nextInt();
            }
            lists[i] = solution.createList(values);
        }

        //System.out.println("Input: lists = " + solution.listsToInputString(lists));

        ListNode mergedHead = solution.mergeKLists(lists);

        System.out.println(solution.listToString(mergedHead));

        scanner.close();
    }
}
##
summa

venna




