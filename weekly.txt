Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

import java.util.Scanner;
import java.util.Stack;

public class Solution {
    public boolean isValid(String s) {
        //Type Code Here..............
        Stack<Character>stack=new Stack<>();
        for(char c:s.toCharArray()){
            if(c=='(' || c=='{' || c=='['){
            stack.push(c);
            }
            else{
                if(stack.isEmpty()){
                    return false;
                }
                char top=stack.pop();
                if((c==')' && top!='(') ||
                (c=='}' && top!='{')||
                (c==']' && top!='[')){
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //System.out.println("Enter a string of brackets:");
        String input = scanner.nextLine();

        Solution solution = new Solution();
        boolean result = solution.isValid(input);

        if (result) {
            System.out.println("true");
        } else {
            System.out.println("false");
        }

        scanner.close();
    }
}
##
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

import java.util.Scanner;
import java.util.Stack;
public class Solution {
     public boolean isValid(String s){
         Stack<Character>stack=new Stack<>();
         for(char c:s.toCharArray()){
             if(c=='(' || c=='{' ||c=='['){
                 stack.push(c);
             }
             else{
                 if(stack.isEmpty()){
                     return false;
                 }
                 char top=stack.pop();
                 if((c==')' && top!='(')||
                 (c=='}' && top!='{')||
                 (c==']' && top!='[')){
                     return false;
                 }
             }
         }
         return stack.isEmpty();
     }
    public int[] searchRange(int[] nums, int target) {
        //Type Code Here............
        int first=findBound(nums,target,true);
        int last=findBound(nums,target,false);
        return new int[]{first,last};
    }
    private int findBound(int[] nums,int target,boolean isFirst){
        int left=0,right=nums.length-1;
        int bound=-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(nums[mid]==target){
                bound=mid;
                if(isFirst){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                    
                }
            }
            else if(nums[mid]<target){
                left=mid+1;
            }
            else{
                right=mid-1;
            }
        }
        return bound;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the size of the array
        //System.out.print("Enter the number of elements in the array: ");
        int n = scanner.nextInt();
        
        // Read the elements of the array
        int[] nums = new int[n];
        //System.out.println("Enter the elements of the array (sorted in non-decreasing order):");
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }
        
        // Read the target value
        //System.out.print("Enter the target value: ");
        int target = scanner.nextInt();
        
        // Create an instance of Solution and find the range
        Solution solution = new Solution();
        int[] result = solution.searchRange(nums, target);
        
        // Print the result
        System.out.println("[" + result[0] + "," + result[1] + "]");
        
        scanner.close();
    }
}
##